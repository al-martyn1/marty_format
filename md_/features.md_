1. Добавление возможностей `C++` `std::format` из `C++20` в `C++17` (бэкпорт новых фич в старый стандарт).

2. Совместимость форматной строки с форматной строкой языков `Python` и `C++`. 
   Некоторые возможности этих языков игнорируются, но не вызывают ошибки при разборе
   форматной строки. В библиотеке совмещены возможности форматирования из языка `Python` и возможности 
   форматирования `C++20` `std::format`, в том числе:

   - `'%'` - форматный символ (`Python`) - форматирование процентов. Числа с плавающей точкой умножаются на `100.0`, целые
     сохранают своё значение, после числа добавляется символ `'%'` (или его локализованный вариант).
     Форматирование производится как для спецификатора `'d'`;
   - `'$'` - форматный символ - форматирование валюты. В отформатированную строку добавляется символ `'$'`
     (или символ локальной валюты пользователя). Форматирование производится как для спецификатора `'d'`;
   - `'n'` - форматный символ (`Python`) - форматирование с учетом системной локали.
     Форматирование производится как для спецификатора `'d'`;
   - `'L'` - опция форматирования (`C++`) - форматирование с учетом системной локали.
     Форматирование производится с учетом заданного спецификатора типа;
   - `'='` - маркер выравнивания по ширине. При использовании данного типа выравнивания знак числа отделяется от числа `'fill'`-символом,
     если не указан ведущий `'0'` при задании ширины, во втором случае заполнение производится нулями;
   - **Разделители разрядов** в форматной строке (`Python`);

3. Поддержка именованных аргументов для `C++` при использовании соответствующих контейнеров для аргументов.

4. Поддержка передачи аргументов через `std::initializer_list` для непосредственного использования из `C++`.

5. Поддержка дополнительных оригинальных фич:
  
  - добавлены форматные символы `'S'` - для отображения булевых значений (`C++`) в верхнем регистре в виде строки;
    `'y'`, `'Y'` - для отображения `bool` значений (`C++`) в виде строк `'yes'`/`'no'` (см. далее),
    а также `'t'`, `'T'` (см. далее);
  - добавлен форматный символ `'$'` - для отображения значений в формате валюты (по умолчанию - `'$NN'`);
  - добавлены форматные символы `'h'` и `'H'` - форматирование чисел в шестнадцатиричном виде,
    при этом в альтернативной форме добавляется суффикс `'h'` и `'H'` (как в ассемблере).
  - `grouping` - добавлен символ группировки `'''` (`apos`), который отсутстсвует в `Python`;
  - `frac_grouping` (отсутствует в `Python` и `C++`) - возможность группировки цифр дробной части чисел 
    с плавающей точкой отдельно явно задаваемым символом, или таким же символом группировки, как и для 
    целой части числа, при задании соответствующего флага при вызове функции форматирования;
  - `'~'` - битовый каст отрицательных знаковых чисел в беззнаковые такого же размера;
  - `'!'` - инверсия регистра:
    - при форматировании `bool` изменяется регистр первой буквы;
    - инверсия регистра в альтернативной форме при форматировании целых чисел `'!#'` - меняет регистр 
      префикса системы счисления (например, `'0x'`) на противоположный, по сравнению с регистром символов числа;
  - **фильтры** для отформатированных значений. Можно использовать цепочки фильтров длиной до 8ми.
    Фильтры могут экранировать символы для вывода в `XML`/`HTML` или в `SQL`.
  - **форматирование двоичных и шестнадцатиричных чисел по ширине типа**: если использован префикс ширины `'0'`,
    но ширина не задана или явно задана нулевой (`'{:0b}'`/`'{:00b}'`/`'{:0X}'`), то количество выводимых цифр 
    будет зависеть от размера выводимого типа -  `'00000000000000000000000110100100'`/`'000001A4'` для 32ух-разрядных
    целых.

6. Упор на использование библиотеки в своих скриптовых языках/DSL языках,
   в том числе:

  - спецификаторы формата `'t'` и `'T'` - для отображения целых чисел, как `bool` в виде строки `'true'`/`'false'`
    для использования в собственных ЯП/DSL, в которых нет типа `bool`;
  - спецификаторы формата `'y'`, `'Y'`  - для отображения целых чисел, как `bool` в виде строки `'yes'`/`'no'`
    для использования в собственных ЯП/DSL, в которых нет типа `bool`.

7. Поддержка Unicode в кодировке UTF-8.

8. Поддержка чисел с плавающей точкой произвольной размерности `marty::Decimal`.

9. Поддержка пользовательских типов строк вместо `std::string` и поддержка микроконтроллеров 
   (`STM32`, как пример). Пока не реализовано, но весьма ready, требует отключения части кода 
   условными макросами, также требуется модифицировать некоторые части, пока завязанные на `std::string`.

10. Возможность создания собственной системы/библиотеки форматирования на базе данной библиотеки с поддержкой
   вывода собственных произвольных типов данных.

