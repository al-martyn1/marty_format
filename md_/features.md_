1. Добавление возможностей `C++` `std::format` из `C++20` в `C++17` (бэкпорт новых фич в старый стандарт).
2. Совместимость форматной строки с форматной строкой языков `Python` и `C++`. 
   Некоторые возможности этих языков игнорируются, но не вызывают ошибки при разборе
   форматной строки. В библиотеке совмещены возможности форматирования из языка `Python` и возможности 
   форматирования `C++20` `std::format`.
3. Поддержка именованных аргументов для `C++` при использовании соответствующих контейнеров для аргументов.
4. Поддержка передачи аргументов через std::initializer_list для непосредственного использования из `C++`.
5. Поддержка дополнительных оригинальных фич:
  - `grouping` - добавлен символ группировки `'''` (apos), который отсутстсвует в `Python`;
  - `frac_grouping` - возможность группировки цифр дробной части чисел с плавающей точкой отдельно явно
    задаваемым символом, или таким же символом группировки, как и для целой части числа, при задании
    соответствующего флага при вызове функции форматирования, отсутствует в `Python` и `C++`;
  - инверсия регистра в альтернативной форме `'!#'`.
  - фильтры для отформатированных значений. Можно использовать цепочки фильтров длиной до 8ми.
    Фильтры могут экранировать символы для вывода в `XML`/`HTML` или в `SQL`.
6. Упор на использование библиотеки в своих скриптовых языках/DSL языках.
7. Поддержка Unicode в кодировке UTF-8.
8. Поддержка чисел с плавающей точкой произвольной размерности `marty::Decimal`.
9. Поддержка пользовательских типов строк вместо `std::string` и поддержка микроконтроллеров 
   (`STM32`, как пример). Пока не реализовано, но весьма ready, требует отключения части кода 
   условными макросами, также требуется модифицировать некоторые части, пока завязанные на `std::string`.
10. Возможность создания собственной системы/библиотеки форматирования на базе данной библиотеки с поддержкой
   вывода собственных произвольных типов данных.
