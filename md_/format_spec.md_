# Синтаксис форматной строки


#// https://docs.python.org/3/library/string.html#formatstrings
#// Format String Syntax - https://docs.python.org/3/library/string.html#format-string-syntax

Форматная строка содержит "поля замены", окруженные фигурными скобками (`{}`).
Все, что не заключено в фигурные скобки, считается текстом, который копируется в вывод без изменений.
Если вам нужно включить символ скобки в текст, его можно экранировать удвоением: `{{` и `}}`.

**Примечание**. В зависимости от режима игнорирования ошибок, закрывающая фигурная скобка может быть
единственной.


Грамматика для полей замены выглядит так:

#// !insert{pre} .md-pp.options
#!pre replacement_fields_gammar.txt

**arg_id** - идентификатор аргумента. Может отсутствовать, тогда используется автоматически 
подставляемый индекс, который инкрементируется при появлении каждого "поля замены" с отсутствующим 
идентификатором аргумента.

**arg_index** - индекс аргумента, начиная с нуля. Для ассоциативных контейнеров 
типа `std::map` и `std::unordered_map` обращение по индексу производится с использованием 
`std::advance`. Индекс аргумента должен быть корректным десятичным числом.

**arg_name** - имя аргумента, допустимы любые символы, кроме символов `:`, `{` и `}`.
В зависимости от типа контейнера, в котором передаются аргументы, именованное обращение к аргументам
может не поддерживаться. Так, для контейнеров типа `std::vector` или `std::initializer_list`
использование именованного аргумента приведёт к выбросу исключения, если это не запрещено режимом 
игнорирования ошибок.

**conversion** - преобразование типа аргумента, см. далее "Преобразование типа аргумента".

**format_spec** - спецификатор формата, см. далее.

**Примечание**. При использовании ассоциативных контейнеров типа `std::map` и `std::unordered_map`
не существует возможности задать порядок следования аргументов, порядок следования аргументов определяется
контейнером. При использовании контейнеров типа `std::vector` или `std::initializer_list` нет возможности
использовать именованные аргументы. Для возможности использования одновременно обращений к аргументам 
по целочисленному индексу и по имени аргумента следует использовать конейнер `std::vector` с элементами
типа `std::pair<std::string, T>` (вместо `std::pair` можно использовать любую другую структуру, которая имеет
вложенные типы `first_type` и `second_type`, и, соответственно, поля `first` и `second`), либо
`marty::format::BaseArgs<...>`, специфицированный пользовательскими типами или явно специфицированный `marty::format::Args`.


## Преобразование типа аргумента

В данный момент не реализовано, планируется к реализации. Использование в поле замены вызовет ошибку.
Надо разобраться, что делают режимы преобразования в оригинальной реализации форматирования в `python`,
и продумать, что они будут делать в данной библиотеке.

#// См. .str() - https://docs.python.org/3/library/stdtypes.html#str
`s` - преобразует аргумент в строку (см. описание [str](https://docs.python.org/3/library/stdtypes.html#str)).

#// .repr() - https://docs.python.org/3/library/functions.html#repr
`r` - преобразует аргумент в строку (см. описание [repr](https://docs.python.org/3/library/functions.html#repr)).

#// .ascii() - https://docs.python.org/3/library/functions.html#ascii
`a` - преобразует аргумент в строку (см. описание [ascii](https://docs.python.org/3/library/functions.html#ascii)).


## Спецификатор формата

#// https://docs.python.org/3/library/string.html#formatspec
#// Format Specification Mini-Language - https://docs.python.org/3/library/string.html#format-specification-mini-language

#!pre format_spec_grammar.txt

**fill**, **align** - заполнение и выравнивание, см. далее.

|Символ выравнивания|Значение|
|:-|:-|
|`<`||
|`>`||
|`=`||
|`^`||


**sign** - знак

**width** - ширина поля

**grouping** - символ группировки

**precision** - точость

**type** - спецификатор типа.



format_spec ::= [options][width][grouping]["." precision][type]
options     ::= [[fill]align][sign]["z"]["#"]["0"]
fill        ::= <any character>
align       ::= "<" | ">" | "=" | "^"
sign        ::= "+" | "-" | " "
width       ::= digit+
grouping    ::= "," | "_" | "'"
precision   ::= digit+
type        ::= "b" | "c" | "d" | "e" | "E" | "f" | "F" | "g" | "G" | "n" | "o" | "s" | "x" | "X" | "%"





