# Синтаксис форматной строки


#// https://docs.python.org/3/library/string.html#formatstrings
#// Format String Syntax - https://docs.python.org/3/library/string.html#format-string-syntax

Форматная строка содержит "поля замены", окруженные фигурными скобками (`{}`).
Все, что не заключено в фигурные скобки, считается текстом, который копируется в вывод без изменений.
Если вам нужно включить символ скобки в текст, его можно экранировать удвоением: `{{` и `}}`.

**Примечание**. В зависимости от режима игнорирования ошибок, закрывающая фигурная скобка может быть
единственной.


## Грамматика полей замены

Грамматика для полей замены выглядит так:

#// !insert{pre} .md-pp.options
#!pre replacement_fields_gammar.txt

Описание полей грамматики полей замены:

#// <arg-list type=text>
<arg-list>

- arg_id
Идентификатор аргумента. Может отсутствовать, тогда используется автоматически 
подставляемый индекс, который инкрементируется при появлении каждого "поля замены" с отсутствующим 
идентификатором аргумента.

- arg_index
Индекс аргумента, начиная с нуля. Для ассоциативных контейнеров 
типа `std::map` и `std::unordered_map` обращение по индексу производится с использованием 
`std::advance`. Индекс аргумента должен быть корректным десятичным числом.

- arg_name
Имя аргумента, допустимы любые символы, кроме символов `:`, `{` и `}`.
В зависимости от типа контейнера, в котором передаются аргументы, именованное обращение к аргументам
может не поддерживаться. Так, для контейнеров типа `std::vector` или `std::initializer_list`
использование именованного аргумента приведёт к выбросу исключения, если это не запрещено режимом 
игнорирования ошибок.

- identifier
Идентификатор - начинается с `identifier_char`, последующие символы могут быть `identifier_char`, цифры, или символ `'.'`.

- identifier_char
символ идентификатора - символ подчеркивания `'_'`, строчная или прописная латинская буква.

- conversion
преобразование типа аргумента, см. далее "Преобразование типа аргумента".

- format_spec
спецификатор формата, см. далее.

</arg-list>

**Примечание**. При использовании ассоциативных контейнеров типа `std::map` и `std::unordered_map`
не существует возможности задать порядок следования аргументов, порядок следования аргументов определяется
контейнером. При использовании контейнеров типа `std::vector` или `std::initializer_list` нет возможности
использовать именованные аргументы. Для возможности использования одновременно обращений к аргументам 
по целочисленному индексу и по имени аргумента следует использовать конейнер `std::vector` с элементами
типа `std::pair<std::string, T>` (вместо `std::pair` можно использовать любую другую структуру, которая имеет
вложенные типы `first_type` и `second_type`, и, соответственно, поля `first` и `second`), либо
`marty::format::BaseArgs<...>`, специфицированный пользовательскими типами или явно специфицированный `marty::format::Args`.


## Преобразование типа аргумента - !conversion

В данный момент обрабатывается при разборе форматной строки, но игнорируется при дальнейшей обработке.
Надо разобраться, что делают режимы преобразования в оригинальной реализации форматирования в `Python`,
и продумать, что они будут делать в данной библиотеке.

<arg-list value-style=backtick>
#// См. .str() - https://docs.python.org/3/library/stdtypes.html#str
-`s`
преобразует аргумент в строку (см. описание [str](https://docs.python.org/3/library/stdtypes.html#str)).

#// .repr() - https://docs.python.org/3/library/functions.html#repr
- `r`
преобразует аргумент в строку (см. описание [repr](https://docs.python.org/3/library/functions.html#repr)).

#// .ascii() - https://docs.python.org/3/library/functions.html#ascii
-`a`
преобразует аргумент в строку (см. описание [ascii](https://docs.python.org/3/library/functions.html#ascii)).
</arg-list>


## Спецификатор формата - format_spec

#// https://docs.python.org/3/library/string.html#formatspec
#// Format Specification Mini-Language - https://docs.python.org/3/library/string.html#format-specification-mini-language

#!pre format_spec_grammar.txt

Описание полей спецификатора формата:

<arg-list>

- format_spec
полный спецификатор формата.

- options
опции форматирования в составе спецификатора формата.

- fill, align
заполнение и выравнивание. Символ заполнения может быть любым символом,
за исключением символов, используемых в форматной строке. Символ заполнения может быть не задан,
тогда будет использоваться символ пробела `space` ([U+0020](https://unicode-explorer.com/c/0020)).

- sign
знак. Данный параметр действителен только для числовых типов, для остальных типов игнорируется.

- z
обрабатывается в форматной строке, но игнорируется (**IGNORED**).

- ~
Битовый каст знаковых целых. По умолчанию, знаковые числа отображаются, как значение его модуля
без знака или со знаком, в зависимости от `'sign'`, при этом отрицательные числа всегда отображаются со знаком.
Иногда требуется отобразить битовое представление числа. Можно при передаче аргумента
явно привести его к безнаковому, но иногда проще задать в форматной строке единственную опцию
битового каста.
Данная опция работает с форматными символами `'b'`, `'B'`, `'x'`, `'X'`, `'h'` и `'H'`.

- !
Инверсия регистра. Если задаётся альтернативная форма опцией `'#'`, то к двоичным и 
шестнадцатиричным числам со спецификаторами типа формата `'b'`, `'B'`, `'x'` и `'X'`
добавляется префикс `'0b'`, `'0B'`, `'0x'` или `'0X'`. Так, шестнадцатеричные числа будут
отображаться как `'0xdeadbeaf'` или `'0XDEADBEAF'` (для спецификаторов типа `'x'` и `'X'`, 
соответственно). Такая запись читается плохо - префикс сливается с остальным числом.
Для того, чтобы префикс был хорошо заметен, его регистр обычно делается отличным от регистра
самого числа - `'0xDEADBEAF'`. Маркер инверсии регистра предназначен для изменения
регистра префикса по сравнению с регистром числа. Так, форматная строка `'!#X'` выведет
`'0xDEADBEAF'`, а `'!#x'` - `'0Xdeadbeaf'`.

Для систем счисления, отличных от двоичной и шестнадцатеричной, а также для спецификаторов 
типа формата, отличных от `'b'`, `'B'`, `'x'`, `'X'`, `'h'` и `'H'`, данная опция игнорируется.

- #
Задаёт использовать альтернативную форму при форматировании. 
Альтернативная форма определяется по-разному для разных типов.
#// Этот параметр действителен только для целых, плавающих и комплексных типов.
Этот параметр действителен только для целых чисел и чисел с плавающий точкой.
Для целых чисел, когда используется двоичный, восьмеричный или шестнадцатеричный вывод, 
этот параметр добавляет соответствующий префикс '0b', '0o', '0x' или '0X' к выходному значению.
Для десятичных чисел параметр игнорируется.
#// Для плавающих и комплексных чисел альтернативная форма заставляет результат преобразования 
Для чисел с плавающий точкой альтернативная форма заставляет результат преобразования 
всегда содержать символ десятичной точки, даже если за ним не следует ни одна цифра. 
Обычно символ десятичной точки появляется в результате этих преобразований, 
только если за ним следует цифра. Кроме того, для преобразований 'g' и 'G' конечные нули не удаляются из результата.

- 0
Задаёт заполение нулями до нужной ширины поля (между знаком числа и его значением).
Также устанавливает выравниваение в `'='`, если выравнивание не задано.
Если выравнивание задано и не равно `'='`, то `'0'` игнорируется.
#!// Если явное выравнивание не указано, то предваряющий поле ширины нулевой символ
#!// включает нулевое заполнение для числовых типов. 
#!// Это эквивалентно символу заполнения `'0'` с типом выравнивания `'='`.

- width
Ширина — это десятичное целое число, определяющее минимальную общую ширину поля, 
включая любые префиксы, разделители и другие символы форматирования. Если не указано, 
то ширина поля будет определяться содержимым.

- grouping
Параметр группировки после поля ширины указывает разделитель групп цифр для целой части числа.
Для десятичных чисел разделение разрядов производится по три цифры. Для спецификаторов `'b'`, `'o'`, `'x'`, and `'X'`
разделение производится на группы по четыре цифры.
Разделитель групп разрядов может быть одним из следующих: `','`, `'_'`, `'''` (apos).

Данный параметр не используется для форматирования в библиотеке языка `C++`.

В языке `Python` символ `'''` (apos) не используется. Также, в языке `Python` разделители `','` и `'_'`
используются при отображении десятичных чисел и отображении `'b'`, `'o'`, `'x'`, and `'X'` чисел соответственно.
Данная библиотека позволяет использовать все допустимые разделители для любых чисел.

При использовании локали для разделения разрядов используется символ (строка), заданна яв локали.

- precision
Точность - десятичное целое число, указывающее, сколько цифр должно отображаться 
после десятичной точки для типов представления 'f' и 'F', или до и после десятичной точки для 
типов представления 'g' или 'G'. Для строковых типов представления поле указывает максимальный 
размер поля — другими словами, сколько символов будет использовано из содержимого поля. 
Точность не допускается для целочисленных типов представления.

- frac_grouping
Группировка цифр числа в дробной части (fractional part groupping). По умолчанию, если при вызове 
функции форматирования не задан флаг форматирования `marty::format::FormattingFlags::fractionalGroupping`, 
группировка цифр в дробной части чисел с плавающей точкой не производится.

При использовании локали для разделения разрядов используется символ (строка), заданна яв локали.

- L
Locale-зависимое форматирование. Аналогично спецификатору типа `'n'`.

- type
спецификатор типа. Определяет, как должны быть отображены данные.

- filters
последовательность фильтров, до восьми в цепочке.

- filter
идентификатор аргумента, предварённый символом пайпа `'|'` (broken vertical bar)

- arg_id, arg_index, arg_name, identifier, identifier_char
См. предыдущий раздел "Грамматика полей замены"

</arg-list>


### Символ заполнения fill

В качестве символов заполнения (`fill`) запрещены символы `'a'`-`'z'` и `'A'`-`'Z'`, а также цифровые символы `'0'`-`'9'`.

Прочие запрещённые символы:

<arg-list value-style="backtick-quote" title="Запрещённый символ|Описание/причина запрещения использования">

-<
Выравнивание по левому краю.

->
Выравнивание по правому краю.

-^
Выравнивание по середине.

-=
Выравнивание чисел по ширине.

-+
Символ знака `'+'` для отображения числовых значений.

--
Символ знака `'-'` для отображения числовых значений.

- `space`
Символ `' '` (`space`/`пробел`) для отображения числовых значений. Символ `' '` (`space`/`пробел`) 
для выравнивания используется по умолчанию, явное указание данного символа не требуется.

-'
Символ группировки разрядов чисел - апостроф (`apos`).

-_
Символ группировки разрядов чисел - подчеркивание (`underscore`).

-,
Символ группировки разрядов чисел запятая (`','`).

-|
Символ последовательности фильтров  (`pipe`/`broken vertical bar`/`BVB`), используется при задании последовательности фильтров.

-%
Символ вывода числа в виде процентов.

-$
Символ вывода числа в виде валюты.

-?
Символ вывода строки в виде `escape`-последовательности.

-!
Символ инверсии регистра.

-#
Символ `альтернативного` режима.

-~
Символ битового каста.

</arg-list>

В текущий момент допустимыми `ASCII`-символами заполнения являются: 
`space`/`пробел` (используется по умолчанию),
а так же символы `'$'`, `'&'`, `'*'`, `';'`, `'@'` и `'~'`.
Также можно использовать любые `UNICODE`-символы.


### Маркер выравнивания align

<arg-list value-style=backtick>
- '<'
Задаёт выравнивание по левому краю поля вывода.

-'>'
Задаёт выравнивание по правому краю поля вывода. Используется по умолчанию.

-'='
Задаёт вставлять заполнение после знака числа, но перед цифрами. Позволяет печатать числа в виде  `'+  120'`. 
Работает только для числовых типов. Если значению ширины поля (`width`) предшествует символ `'0'`, то данный тип 
выравнивания становится значением по умолчанию и вывод примет вид `'+00120'`.

-'^'
Задаёт выравнивание по центру
</arg-list>

Обратите внимание, что если не определена минимальная ширина поля (`width`), ширина поля всегда будет 
такой же, как и размер заполняющих его данных, поэтому параметр выравнивания в этом случае не имеет смысла.


### Признак знака sign

<arg-list value-style=backtick>
-'+'
Указывает, что знак следует использовать как для положительных, так и для отрицательных чисел.|

-'-'
Указывает, что знак следует использовать только для отрицательных чисел (это поведение используется по умолчанию).

-space
Указывает, что для положительных чисел следует использовать пробел, а для отрицательных чисел — знак `'-'`.
</arg-list>

**Примечание** Тут надо написать про конвертацию - есть, нет, что-то ещё.

#!insert{no-fail,doc,raise=-1} type_specifiers.md_ 


## Экранирование строк

См. https://en.cppreference.com/w/cpp/utility/format/spec,
раздел "Formatting escaped characters and strings".


###


###





