# Синтаксис форматной строки


#// https://docs.python.org/3/library/string.html#formatstrings
#// Format String Syntax - https://docs.python.org/3/library/string.html#format-string-syntax

Форматная строка содержит "поля замены", окруженные фигурными скобками (`{}`).
Все, что не заключено в фигурные скобки, считается текстом, который копируется в вывод без изменений.
Если вам нужно включить символ скобки в текст, его можно экранировать удвоением: `{{` и `}}`.

**Примечание**. В зависимости от режима игнорирования ошибок, закрывающая фигурная скобка может быть
единственной.


## Грамматика полей замены

Грамматика для полей замены выглядит так:

#// !insert{pre} .md-pp.options
#!pre replacement_fields_gammar.txt

Описание полей грамматики полей замены:

<arg-list type=text>

- arg_id
Идентификатор аргумента. Может отсутствовать, тогда используется автоматически 
подставляемый индекс, который инкрементируется при появлении каждого "поля замены" с отсутствующим 
идентификатором аргумента.

- arg_index
Индекс аргумента, начиная с нуля. Для ассоциативных контейнеров 
типа `std::map` и `std::unordered_map` обращение по индексу производится с использованием 
`std::advance`. Индекс аргумента должен быть корректным десятичным числом.

- arg_name
Имя аргумента, допустимы любые символы, кроме символов `:`, `{` и `}`.
В зависимости от типа контейнера, в котором передаются аргументы, именованное обращение к аргументам
может не поддерживаться. Так, для контейнеров типа `std::vector` или `std::initializer_list`
использование именованного аргумента приведёт к выбросу исключения, если это не запрещено режимом 
игнорирования ошибок.

- identifier
Идентификатор - начинается с `identifier_char`, последующие символы могут быть `identifier_char`, цифры, или символ `'.'`.

- identifier_char
символ идентификатора - символ подчеркивания `'_'`, строчная или прописная латинская буква.

- conversion
преобразование типа аргумента, см. далее "Преобразование типа аргумента".

- format_spec
спецификатор формата, см. далее.

</arg-list>

**Примечание**. При использовании ассоциативных контейнеров типа `std::map` и `std::unordered_map`
не существует возможности задать порядок следования аргументов, порядок следования аргументов определяется
контейнером. При использовании контейнеров типа `std::vector` или `std::initializer_list` нет возможности
использовать именованные аргументы. Для возможности использования одновременно обращений к аргументам 
по целочисленному индексу и по имени аргумента следует использовать конейнер `std::vector` с элементами
типа `std::pair<std::string, T>` (вместо `std::pair` можно использовать любую другую структуру, которая имеет
вложенные типы `first_type` и `second_type`, и, соответственно, поля `first` и `second`), либо
`marty::format::BaseArgs<...>`, специфицированный пользовательскими типами или явно специфицированный `marty::format::Args`.


## Преобразование типа аргумента - !conversion

В данный момент обрабатывается при разборе форматной строки, но игнорируется при дальнейшей обработке.
Надо разобраться, что делают режимы преобразования в оригинальной реализации форматирования в `Python`,
и продумать, что они будут делать в данной библиотеке.

<arg-list value-style=backtick>
#// См. .str() - https://docs.python.org/3/library/stdtypes.html#str
-`s`
преобразует аргумент в строку (см. описание [str](https://docs.python.org/3/library/stdtypes.html#str)).

#// .repr() - https://docs.python.org/3/library/functions.html#repr
- `r`
преобразует аргумент в строку (см. описание [repr](https://docs.python.org/3/library/functions.html#repr)).

#// .ascii() - https://docs.python.org/3/library/functions.html#ascii
-`a`
преобразует аргумент в строку (см. описание [ascii](https://docs.python.org/3/library/functions.html#ascii)).
</arg-list>


## Спецификатор формата - format_spec

#// https://docs.python.org/3/library/string.html#formatspec
#// Format Specification Mini-Language - https://docs.python.org/3/library/string.html#format-specification-mini-language

#!pre format_spec_grammar.txt

Описание полей спецификатора формата:

<arg-list>

- fill, align
заполнение и выравнивание. Символ заполнения может быть любым символом,
за исключением символов, используемых в форматной строке. Символ заполнения может быть не задан,
тогда будет использоваться символ пробела `space` ([U+0020](https://unicode-explorer.com/c/0020)).

- sign
знак. Данный параметр действителен только для числовых типов, для остальных типов игнорируется.

- z
обрабатывается в форматной строке, но игнорируется (**IGNORED**).

- !
Инверсия регистра. Если задаётся альтернативная форма опцией `'#'`, то к двоичным и 
шестнадцатиричным числам со спецификаторами типа формата `'b'`, `'B'`, `'x'` и `'X'`
добавляется префикс `'0b'`, `'0B'`, `'0x'` или `'0X'`. Так, шестнадцатеричные числа будут
отображаться как `'0xdeadbeaf'` или `'0XDEADBEAF'` (для спецификаторов типа `'x'` и `'X'`, 
соответственно). Такая запись читается плохо - префикс сливается с остальным числом.
Для того, чтобы префикс был хорошо заметен, его регистр обычно делается отличным от регистра
самого числа - `'0xDEADBEAF'`. Маркер инверсии регистра предназначен для изменения
регистра префикса по сравнению с регистром числа. Так, форматная строка `'!#X'` выведет
`'0xDEADBEAF'`, а `'!#x'` - `'0Xdeadbeaf'`.

Для систем счисления, отличных от двоичной и шестнадцатеричной, а также для спецификаторов 
типа формата, отличных от `'b'`, `'B'`, `'x'` и `'X'`, данная опция игнорируется.

- #
Задаёт использовать альтернативную форму при форматировании. 
Альтернативная форма определяется по-разному для разных типов.
#// Этот параметр действителен только для целых, плавающих и комплексных типов.
Этот параметр действителен только для целых чисел и чисел с плавающий точкой.
Для целых чисел, когда используется двоичный, восьмеричный или шестнадцатеричный вывод, 
этот параметр добавляет соответствующий префикс '0b', '0o', '0x' или '0X' к выходному значению.
Для десятичных чисел параметр игнорируется.
#// Для плавающих и комплексных чисел альтернативная форма заставляет результат преобразования 
Для чисел с плавающий точкой альтернативная форма заставляет результат преобразования 
всегда содержать символ десятичной точки, даже если за ним не следует ни одна цифра. 
Обычно символ десятичной точки появляется в результате этих преобразований, 
только если за ним следует цифра. Кроме того, для преобразований 'g' и 'G' конечные нули не удаляются из результата.

- 0
Если явное выравнивание не указано, то предваряющий поле ширины нулевой символ
включает нулевое заполнение для числовых типов. Это эквивалентно символу заполнения `'0'` с типом выравнивания `'='`.


- width
Ширина — это десятичное целое число, определяющее минимальную общую ширину поля, 
включая любые префиксы, разделители и другие символы форматирования. Если не указано, 
то ширина поля будет определяться содержимым.

- grouping
Параметр группировки после поля ширины указывает разделитель групп цифр для целой части числа.
Для десятичных чисел разделение разрядов производится по три цифры. Для спецификаторов `'b'`, `'o'`, `'x'`, and `'X'`
разделение производится на группы по четыре цифры.
Разделитель групп разрядов может быть одним из следующих: `','`, `'_'`, `'''` (apos).

Данный параметр не используется для форматирования в библиотеке языка `C++`.

В языке `Python` символ `'''` (apos) не используется. Также, в языке `Python` разделители `','` и `'_'`
используются при отображении десятичных чисел и отображении `'b'`, `'o'`, `'x'`, and `'X'` чисел соответственно.
Данная библиотека позволяет использовать все допустимые разделители для любых чисел.

- precision
Точность - десятичное целое число, указывающее, сколько цифр должно отображаться 
после десятичной точки для типов представления 'f' и 'F', или до и после десятичной точки для 
типов представления 'g' или 'G'. Для строковых типов представления поле указывает максимальный 
размер поля — другими словами, сколько символов будет использовано из содержимого поля. 
Точность не допускается для целочисленных типов представления.

- frac_grouping
Группировка цифр числа в дробной части (fractional part groupping). По умолчанию, если при вызове 
функции форматирования не задан флаг форматирования `marty::format::FormattingFlags::fractionalGroupping`, 
группировка цифр в дробной части чисел с плавающей точкой не производится.


- L
Locale-зависимое форматирование. Аналогично спецификатору типа `'n'`. В текущий момент игнорируется (**IGNORED**).


- type
спецификатор типа. Определяет, как должны быть отображены данные.

- filters
последовательность фильтров, до восьми в цепочке.

- filter
идентификатор аргумента, предварённый символом пайпа `'|'` (broken vertical bar)

- arg_id, arg_index, arg_name, identifier, identifier_char
См. предыдущий раздел "Грамматика полей замены"

</arg-list>


### Символ заполнения fill

В качестве символов заполнения (`fill`) запрещены символы `'a'`-`'z'` и `'A'`-`'Z'`, а также цифровые символы `'0'`-`'9'`.

Прочие запрещённые символы:

<arg-list value-style="backtick-quote" title="Запрещённый символ|Описание/причина запрещения использования">

-<
Выравнивание по левому краю.

->
Выравнивание по правому краю.

-^
Выравнивание по середине.

-=
Выравнивание чисел по ширине.

-+
Символ знака `'+'` для отображения числовых значений.

--
Символ знака `'-'` для отображения числовых значений.

- `space`
Символ `' '` (`space`/`пробел`) для отображения числовых значений. Символ `' '` (`space`/`пробел`) 
для выравнивания используется по умолчанию, явное указание данного символа не требуется.

-'
Символ группировки разрядов чисел - апостроф (`apos`).

-_
Символ группировки разрядов чисел - подчеркивание (`underscore`).

-`,`
Символ группировки разрядов чисел запятая (`','`).

-|
Символ последовательности фильтров  (`pipe`)  (`broken vertical bar`), используется при задании последовательности фильтров.

-%
Символ вывода числа в виде процентов.

-?
Символ вывода строки в виде `escape`-последовательности.

-#
Символ `альтернативного` режима.

-!
Символ инверсии регистра.

</arg-list>


### Маркер выравнивания align

<arg-list value-style=backtick>
- '<'
Задаёт выравнивание по левому краю поля вывода.

-'>'
Задаёт выравнивание по правому краю поля вывода. Используется по умолчанию.

-'='
Задаёт вставлять заполнение после знака числа, но перед цифрами. Позволяет печатать числа в виде  `'+  120'`. 
Работает только для числовых типов. Если значению ширины поля (`width`) предшествует символ `'0'`, то данный тип 
выравнивания становится значением по умолчанию и вывод примет вид `'+00120'`.

-'^'
Задаёт выравнивание по центру
</arg-list>

Обратите внимание, что если не определена минимальная ширина поля (`width`), ширина поля всегда будет 
такой же, как и размер заполняющих его данных, поэтому параметр выравнивания в этом случае не имеет смысла.


### Признак знака sign

<arg-list value-style=backtick>
-'+'
Указывает, что знак следует использовать как для положительных, так и для отрицательных чисел.|

-'-'
Указывает, что знак следует использовать только для отрицательных чисел (это поведение используется по умолчанию).

-space
Указывает, что для положительных чисел следует использовать пробел, а для отрицательных чисел — знак `'-'`.
</arg-list>

**Примечание**. Поддержка `space` в форматной строке реализована, но игнорируется при форматированиии (**IGNORED**).



Тут надо написать про конвертацию - есть, нет, что-то ещё.


## Поддерживаемые спецификаторы типа

Символами `Py` обозначаются спецификаторы типа `Python`, `C++` - `C++`, соответственно, спецификаторы, которые 
поддерживаются обоими языками, будут обозначены как `Py`/`C++`.

Тестируем таблицу без заголовка

#// .. |:-----------|:---|:-------|
#// |**`none`**|`Py`/`C++`|Аналогично `'s'`.|
#// |`'s'` |`Py`/`C++`|Выводит строку|
#// |`'?'` |    `C++`|Выводит экранированную строку, см. далее "Экранирование строк"|
#// 
#// Тестируем таблицу без заголовка и без разделителя заголовка
#// 
#// |`none`|`Py`/`C++`|Аналогично `'s'`.|
#// |`'s'` |`Py`/`C++`|Выводит строку|
#// |`'?'` |    `C++`|Выводит экранированную строку, см. далее "Экранирование строк"|


### Спецификаторы представления строк

#// Тестируем виды представления списков аргументов
#// 
#// <arg-list title=":Спецификатор:|Язык:|:Описание">
#// - `none`
#// `Py`/`C++`
#// Аналогично `'s'`.
#// -`'s'`
#//  `Py`/`C++`
#//  Выводит строку
#// -`'?'`
#//  `C++`
#//  Выводит экранированную строку.
#// 
#//  См. далее "Экранирование строк"
#// 
#// - some
#// 
#// - other
#// a
#// b
#// c
#// d
#// e
#// 
#// f
#// 
#// </arg-list>
#// 
#// 
#// <arg-list type=text title=":Спецификатор:|Язык:|:Описание">
#// - `none`
#// `Py`/`C++`
#// Аналогично `'s'`.
#// -`'s'`
#//  `Py`/`C++`
#//  Выводит строку
#// -`'?'`
#//  `C++`
#//  Выводит экранированную строку.
#// 
#//  См. далее "Экранирование строк"
#// 
#// - some
#// 
#// - other
#// a
#// b
#// c
#// d
#// e
#// 
#// f
#// 
#// </arg-list>
#// 

<arg-list value-style=backtick title=":Спецификатор|:Язык|:Описание">
-none
`Py`/`C++`
Аналогично `'s'`.

-'s'
`Py`/`C++`
Выводит строку.

-'?'
`C++`
Выводит экранированную строку, см. далее "Экранирование строк".
</arg-list>


### Спецификаторы представления целочисленных типов

<arg-list value-style=backtick title=":Спецификатор|:Язык|:Описание">
-none
`Py`/`C++`
Аналогично `'d'`.

-'b'
`Py`/`C++`
Форматирует число в двоичном виде. Префикс основания системы счисления - `'0b'` и `'0B'` 
(с инверсией регистра).

-'B'
`C++`
Форматирует число в двоичном виде. Префикс основания системы счисления - `'0B'` и `'0b'` 
(с инверсией регистра).

-'c'
`Py`/`C++`
Символ. Отображает целое число в виде символа.

-'d'
`Py`/`C++`
Десятичное число (в обычной нотации).

-'o'
`Py`/`C++`
Форматирует число в восьмеричном виде. Префикс основания системы счисления - `'0'`.

-'x'
`Py`/`C++`
Форматирует число в шестнадцатеричном виде. Префикс основания системы счисления - `'0x'` и `'0X'` 
(с инверсией регистра).

-'X'
`Py`/`C++`
Форматирует число в шестнадцатеричном виде. Префикс основания системы счисления - `'0X'` и `'0x'` 
(с инверсией регистра).

-'n'
`Py`
Десятичное число. Аналогично форматному символу `'d'` с `C++` опцией `'L'`. Форматирует число с 
использованием символа разделителя разрядов, заданного системной локалью. В данный момент 
используется фиксированный символ `'''` (apos).

-'%'
`Py`
Производит вывод в формате процентов, как для числа с плавающей точкой, но умножения на 100
не производится (предполагается, что оно уже было сделано).

#// |`''`|`Py`/`C++`||
</arg-list>

### Спецификаторы представления типов с плавающей точкой

<arg-list value-style=backtick title=":Спецификатор|:Язык|:Описание">
-none

-'a'
`C++`
Шестнадцатиричное представление чисел с плавающей точкой.

-'A'
`C++`
Шестнадцатиричное представление чисел с плавающей точкой.

-'e'
`Py`/`C++`
Научная запись. Для заданной точности `precision` форматирует число в научной записи с буквой `'e'`,
разделяющей коэффициент от показателя степени. Коэффициент имеет одну цифру до и `precision` цифр после 
десятичной точки, всего `precision` + 1 значащих цифр. Если точность не указана, 
использует точность 6 цифр после десятичной точки для float и показывает все цифры коэффициента для Decimal.
Если `precision`=0, десятичная точка опускается, если не используется опция `'#'`.

-'E'
`Py`/`C++`
Научная запись. То же, что и `'e'`, но в качестве разделительного символа используется заглавная `'E'`.

-'f'
`Py`/`C++`
Нотация с фиксированной точкой. Для заданной точности p форматирует число как десятичное число с ровно 
`precision` цифрами после десятичной точки. Если точность не указана, использует точность 6 цифр после 
десятичной точки для float и использует точность, достаточную для отображения всех цифр коэффициентов 
для Decimal. Если p=0, десятичная точка опускается, если не используется опция `'#'`.

-'F'
`Py`/`C++`
Нотация с фиксированной точкой. То же, что и `'f'`, но преобразует `nan` в `'NAN'` и `inf` в `'INF'`.

-'g'
`Py`/`C++`
Общий формат. Для заданной точности p >= 1 это округляет число до p значащих цифр, а затем форматирует 
результат либо в формате с фиксированной точкой, либо в экспоненциальном формате, в зависимости от его величины. 
Точность 0 рассматривается как эквивалент точности 1.

Точные правила следующие: предположим, что результат, отформатированный с типом представления 'e' и точностью p-1,
будет иметь показатель степени exp. Тогда, если m <= exp < p, где m равно -4 для чисел с плавающей точкой и -6 для 
десятичных чисел, число форматируется с типом представления 'f' и точностью p-1-exp. В противном случае число 
форматируется с типом представления 'e' и точностью p-1. В обоих случаях незначащие конечные нули удаляются из 
значащей части, а десятичная точка также удаляется, если после нее не осталось цифр, если только не используется опция '#'.

Если точность не указана, используется точность 6 значащих цифр для чисел с плавающей точкой. Для десятичных 
чисел коэффициент результата формируется из цифр коэффициента значения; для значений, меньших 1e-6 по абсолютной 
величине, и значений, где разрядное значение младшей значащей цифры больше 1, используется экспоненциальное 
обозначение, в противном случае используется обозначение с фиксированной точкой.

Положительная и отрицательная бесконечность, положительный и отрицательный ноль и nan форматируются как 
inf, -inf, 0, -0 и nan соответственно, независимо от точности.

-'G'
`Py`/`C++`
Общий формат. То же, что и «g», за исключением переключения на «E», если число становится слишком большим.
Представления бесконечности и NaN также записываются заглавными буквами.

-'n'
`Py`

-'%'
`Py`

#// -''
#// `Py`/`C++`
</arg-list>


**Примечание**. Десятичные числа с произвольной размерностью `marty::Decimal`
в режиме форматирования обычного числа с плавающей точкой (`'f'`/`'F'`) форматируются как есть,
в других режимах форматирование производится стандартными средствами `C++` через преобразование
в `long double`.


### Спецификаторы представления указателей

<arg-list value-style=backtick title=":Спецификатор|:Язык|:Описание">
-none

-'p'
`C++`
</arg-list>


## Экранирование строк

См. https://en.cppreference.com/w/cpp/utility/format/spec,
раздел "Formatting escaped characters and strings".


###


###





