# Синтаксис форматной строки


#// https://docs.python.org/3/library/string.html#formatstrings
#// Format String Syntax - https://docs.python.org/3/library/string.html#format-string-syntax

Форматная строка содержит "поля замены", окруженные фигурными скобками (`{}`).
Все, что не заключено в фигурные скобки, считается текстом, который копируется в вывод без изменений.
Если вам нужно включить символ скобки в текст, его можно экранировать удвоением: `{{` и `}}`.

**Примечание**. В зависимости от режима игнорирования ошибок, закрывающая фигурная скобка может быть
единственной.


Грамматика для полей замены выглядит так:

#// !insert{pre} .md-pp.options
#!pre replacement_fields_gammar.txt

Описание полей грамматики полей замены:

<arg-list type=text>
-arg_id
идентификатор аргумента. Может отсутствовать, тогда используется автоматически 
подставляемый индекс, который инкрементируется при появлении каждого "поля замены" с отсутствующим 
идентификатором аргумента.

-arg_index
индекс аргумента, начиная с нуля. Для ассоциативных контейнеров 
типа `std::map` и `std::unordered_map` обращение по индексу производится с использованием 
`std::advance`. Индекс аргумента должен быть корректным десятичным числом.

-arg_name
имя аргумента, допустимы любые символы, кроме символов `:`, `{` и `}`.
В зависимости от типа контейнера, в котором передаются аргументы, именованное обращение к аргументам
может не поддерживаться. Так, для контейнеров типа `std::vector` или `std::initializer_list`
использование именованного аргумента приведёт к выбросу исключения, если это не запрещено режимом 
игнорирования ошибок.

-conversion
преобразование типа аргумента, см. далее "Преобразование типа аргумента".

-format_spec
спецификатор формата, см. далее.
</arg-list>

**Примечание**. При использовании ассоциативных контейнеров типа `std::map` и `std::unordered_map`
не существует возможности задать порядок следования аргументов, порядок следования аргументов определяется
контейнером. При использовании контейнеров типа `std::vector` или `std::initializer_list` нет возможности
использовать именованные аргументы. Для возможности использования одновременно обращений к аргументам 
по целочисленному индексу и по имени аргумента следует использовать конейнер `std::vector` с элементами
типа `std::pair<std::string, T>` (вместо `std::pair` можно использовать любую другую структуру, которая имеет
вложенные типы `first_type` и `second_type`, и, соответственно, поля `first` и `second`), либо
`marty::format::BaseArgs<...>`, специфицированный пользовательскими типами или явно специфицированный `marty::format::Args`.


## Преобразование типа аргумента

В данный момент обрабатывается при разборе форматной строки, но игнорируется при дальнейшей обработке.
Надо разобраться, что делают режимы преобразования в оригинальной реализации форматирования в `Python`,
и продумать, что они будут делать в данной библиотеке.

<arg-list value-style=backtick>
#// См. .str() - https://docs.python.org/3/library/stdtypes.html#str
-`s`
преобразует аргумент в строку (см. описание [str](https://docs.python.org/3/library/stdtypes.html#str)).

#// .repr() - https://docs.python.org/3/library/functions.html#repr
- `r`
преобразует аргумент в строку (см. описание [repr](https://docs.python.org/3/library/functions.html#repr)).

#// .ascii() - https://docs.python.org/3/library/functions.html#ascii
-`a`
преобразует аргумент в строку (см. описание [ascii](https://docs.python.org/3/library/functions.html#ascii)).
</arg-list>


## Спецификатор формата

#// https://docs.python.org/3/library/string.html#formatspec
#// Format Specification Mini-Language - https://docs.python.org/3/library/string.html#format-specification-mini-language

#!pre format_spec_grammar.txt

Описание полей спецификатора формата:

<arg-list>

- fill, align
заполнение и выравнивание. Символ заполнения может быть любым символом,
за исключением символов, используемых в форматной строке. Символ заполнения может быть не задан,
тогда будет использоваться символ пробела `space` ([U+0020](https://unicode-explorer.com/c/0020)).

- sign
знак. Данный параметр действителен только для числовых типов.

- z
обрабатывается в форматной строке, но игнорируется (**IGNORED**).

- #
Задаёт использовать альтернативную форму при форматировании. 
Альтернативная форма определяется по-разному для разных типов.
#// Этот параметр действителен только для целых, плавающих и комплексных типов.
Этот параметр действителен только для целых чисел и чисел с плавающий точкой.
Для целых чисел, когда используется двоичный, восьмеричный или шестнадцатеричный вывод, 
этот параметр добавляет соответствующий префикс '0b', '0o', '0x' или '0X' к выходному значению.
Для десятичных чисел параметр игнорируется.
#// Для плавающих и комплексных чисел альтернативная форма заставляет результат преобразования 
Для чисел с плавающий точкой альтернативная форма заставляет результат преобразования 
всегда содержать символ десятичной точки, даже если за ним не следует ни одна цифра. 
Обычно символ десятичной точки появляется в результате этих преобразований, 
только если за ним следует цифра. Кроме того, для преобразований 'g' и 'G' конечные нули не удаляются из результата.

- 0
Если явное выравнивание не указано, то предваряющий поле ширины нулевой символ
включает нулевое заполнение для числовых типов. Это эквивалентно символу заполнения `'0'` с типом выравнивания `'='`.


- width
Ширина — это десятичное целое число, определяющее минимальную общую ширину поля, 
включая любые префиксы, разделители и другие символы форматирования. Если не указано, 
то ширина поля будет определяться содержимым.

- grouping
Параметр группировки после поля ширины указывает разделитель групп цифр для целой части числа.
Для десятичных чисел разделение разрядов производится по три цифры. Для спецификаторов `'b'`, `'o'`, `'x'`, and `'X'`
разделение производится на группы по четыре цифры.
Разделитель групп разрядов может быть одним из следующих: `','`, `'_'`, `'''` (apos).

Данный параметр не используется для форматирования в библиотеке языка `C++`.

В языке `Python` символ `'''` (apos) не используется. Также, в языке `Python` разделители `','` и `'_'`
используются при отображении десятичных чисел и отображении `'b'`, `'o'`, `'x'`, and `'X'` чисел соответственно.
Данная библиотека позволяет использовать все допустимые разделители для любых чисел.

- precision
Точность - десятичное целое число, указывающее, сколько цифр должно отображаться 
после десятичной точки для типов представления 'f' и 'F', или до и после десятичной точки для 
типов представления 'g' или 'G'. Для строковых типов представления поле указывает максимальный 
размер поля — другими словами, сколько символов будет использовано из содержимого поля. 
Точность не допускается для целочисленных типов представления.

- L
locale-зависимое форматирование. Аналогично спецификатору типа `'n'`. В текущий момент игнорируется (**IGNORED**).


- type
спецификатор типа. Определяет, как должны быть отображены данные.

</arg-list>


### Маркер выравнивания align

<arg-list value-style=backtick>
- '<'
Задаёт выравнивание по левому краю поля вывода.

-'>'
Задаёт выравнивание по правому краю поля вывода. Используется по умолчанию.

-'='
Задаёт вставлять заполнение после знака числа, но перед цифрами. Позволяет печатать числа в виде  `'+  120'`. Работает только для числовых типов. Если значению ширины поля (`width`) предшествует символ `'0'`, то данный тип выравнивания становится значением по умолчанию и вывод примет вид `'+00120'`.

-'^'
Задаёт выравнивание по центру
</arg-list>

Обратите внимание, что если не определена минимальная ширина поля (`width`), ширина поля всегда будет 
такой же, как и размер заполняющих его данных, поэтому параметр выравнивания в этом случае не имеет смысла.


### Признак знака sign

<arg-list value-style=backtick>
-'+'
Указывает, что знак следует использовать как для положительных, так и для отрицательных чисел.|

-'-'
Указывает, что знак следует использовать только для отрицательных чисел (это поведение используется по умолчанию).

-space
Указывает, что для положительных чисел следует использовать пробел, а для отрицательных чисел — знак `'-'`.
</arg-list>

**Примечание**. Поддержка `space` в форматной строке реализована, но игнорируется при форматированиии (**IGNORED**).



Тут надо написать про конвертацию - есть, нет, что-то ещё.


## Поддерживаемые спецификаторы типа

Символами `Py` обозначаются спецификаторы типа `Python`, `C++` - `C++`, соответственно, спецификаторы, которые 
поддерживаются обоими языками, будут обозначены как `Py`/`C++`.

Тестируем таблицу без заголовка

#// .. |:-----------|:---|:-------|
#// |**`none`**|`Py`/`C++`|Аналогично `'s'`.|
#// |`'s'` |`Py`/`C++`|Выводит строку|
#// |`'?'` |    `C++`|Выводит экранированную строку, см. далее "Экранирование строк"|
#// 
#// Тестируем таблицу без заголовка и без разделителя заголовка
#// 
#// |`none`|`Py`/`C++`|Аналогично `'s'`.|
#// |`'s'` |`Py`/`C++`|Выводит строку|
#// |`'?'` |    `C++`|Выводит экранированную строку, см. далее "Экранирование строк"|


### Спецификаторы представления строк

#// Тестируем виды представления списков аргументов
#// 
#// <arg-list title=":Спецификатор:|Язык:|:Описание">
#// - `none`
#// `Py`/`C++`
#// Аналогично `'s'`.
#// -`'s'`
#//  `Py`/`C++`
#//  Выводит строку
#// -`'?'`
#//  `C++`
#//  Выводит экранированную строку.
#// 
#//  См. далее "Экранирование строк"
#// 
#// - some
#// 
#// - other
#// a
#// b
#// c
#// d
#// e
#// 
#// f
#// 
#// </arg-list>
#// 
#// 
#// <arg-list type=text title=":Спецификатор:|Язык:|:Описание">
#// - `none`
#// `Py`/`C++`
#// Аналогично `'s'`.
#// -`'s'`
#//  `Py`/`C++`
#//  Выводит строку
#// -`'?'`
#//  `C++`
#//  Выводит экранированную строку.
#// 
#//  См. далее "Экранирование строк"
#// 
#// - some
#// 
#// - other
#// a
#// b
#// c
#// d
#// e
#// 
#// f
#// 
#// </arg-list>
#// 

<arg-list value-style=backtick title=":Спецификатор|:Язык|:Описание">
-none
`Py`/`C++`
Аналогично `'s'`.

-'s'
`Py`/`C++`
Выводит строку.

-'?'
`C++`
Выводит экранированную строку, см. далее "Экранирование строк".
</arg-list>


### Спецификаторы представления целочисленных типов

<arg-list value-style=backtick title=":Спецификатор|:Язык|:Описание">
-none
`Py`/`C++`
Аналогично `'d'`.

-'b'
`Py`/`C++`

-'B'
`C++`

-'c'
`Py`/`C++`

-'d'
`Py`/`C++`

-'o'
`Py`/`C++`

-'x'
`Py`/`C++`

-'X'
`Py`/`C++`

-'n'
`Py`/`C++`
#// |`''`|`Py`/`C++`||
</arg-list>

### Спецификаторы представления типов с плавающей точкой

<arg-list value-style=backtick title=":Спецификатор|:Язык|:Описание">
-'a'
`Py`/`C++`

-'A'
`Py`/`C++`

-'e'
`Py`/`C++`

-'E'
`Py`/`C++`

-'f'
`Py`/`C++`

-'F'
`Py`/`C++`

-'g'
`Py`/`C++`

-'G'
`Py`/`C++`

-''
`Py`/`C++`

#// -`''`
#// `Py`/`C++`
#// 
#// -`''`
#// `Py`/`C++`
#// |`''`|`Py`/`C++`||
</arg-list>


## Экранирование строк


###


###





