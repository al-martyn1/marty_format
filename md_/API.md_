
# API библиотеки


## Обобщённый тип фильтра BasicFormatValueFilter

Функциональный объект - фильтр, для преобразования форматированного значения в целевую строку.

Фильтрация производится после форматирования поля.

#!insert{trim,nolineno,noKeepCutTags,filename,no-path,no-filename-line-no} marty_format_types.h#BasicFormatValueFilter

Параметры шаблона:

<arg-list>

- InputIteratorType
Тип входного итератора, должен иметь конструктор, принимающий два аргумента: `const CharType* pBegin` и `const CharType* pEnd`,
и конструктор без параметров, создающий `end`-итератор, при вызове оператора `operator==` для него и итератора, 
в котором равенство указателей `pBegin` и `pEnd` обозначает достижение конца последовательности, должен возвращать `true`.

- OutputIteratorType
Тип выходного итератора, добавляет символы в результирующую строку/контейнер символов.

</arg-list>

**Примечание**. Попытка вывода объекта фильтра как значение вызовет ошибку (исключение), или будет 
проигнорирована, в зависимости от режима игнорирования ошибок.

### Пример реализации методов InputIteratorType для использования совместно с BasicFormatValueFilter

#!insert{trim,nolineno,noKeepCutTags,no-filename,no-path,no-filename-line-no} input_iterator_sample_methods.cpp


## Тип фильтра FormatValueFilter

Специализация базового фильтра `BasicFormatValueFilter` для UTF-8 строк: 

#!insert{trim,nolineno,noKeepCutTags,filename,no-path,no-filename-line-no} marty_format_types.h#FormatValueFilter


## Стандартные фильтры

Стандартные фильтры располагаются в пространстве имён `marty::format::filters`.

Стандартные фильтры:

<arg-list title="Тип|Описание">

- XmlTextFilter
производит преобразование символов, которые недопустимы в тексте `XML`/`HTML` тэгов в стандартные сущности (`entity`) - `&apos`, `&quot`, `&lt`, `&gt`.

- XmlAttrFilter
производит преобразование символов, которые недопустимы в атрибутах `XML`/`HTML` тэгов в стандартные сущности (`entity`) - `&apos`, `&quot`, `&lt`, `&gt`.

- SqlValueFilter
производит преобразование символов, которые недопустимы в значениях в тексте `SQL`-запросов.

</arg-list>

**Примечание**. В текущий момент стандартные фильтры не реализованы (**NOT_IMPLEMENTED**).


## Фабрика стандартных фильтров - makeStandardFormatValueFilter

Возвращает стандартный фильтр по его имени.

#!insert{trim,nolineno,noKeepCutTags,filename,no-path,no-filename-line-no} marty_format_types.h#makeStandardFormatValueFilter

В настоящее время фабрика не реализована и выбрасывает исключение на любое переданное имя фильтра (**NOT_IMPLEMENTED**).

Допустимые имена фильтров:

<arg-list value-style=backtick-quote>

- xml
возвращает экземпляр фильтра для `XML`, как для текста, так и для атрибутов.

- xml_text
возвращает экземпляр фильтра для текста `XML`.

- xml_attr
возвращает экземпляр фильтра для атрибутов `XML`.

- html
возвращает экземпляр фильтра для `HTML`, как для текста, так и для атрибутов.

- html_text
возвращает экземпляр фильтра для текста `HTML`.

- html_attr
возвращает экземпляр фильтра для атрибутов `HTML`.

- sql
возвращает экземпляр фильтра для значений `SQL`-запросов.

</arg-list>


## marty::format::FormatArgumentVariant - Variant-тип аргумента

Стандартный тип аргумента на базе `std::variant`.

Это стандартный тип `marty::format::FormatArgumentVariant`. Пользователь библиотеки может определить
свой вариант variant'а и использовать его в своих библиотеках или прикладном коде.

#!insert{trim,nolineno,noKeepCutTags,filename,no-path,no-filename-line-no} marty_format_types.h#FormatArgumentVariant


## marty::format::BasicArgs

Контейнер `BasicArgs` предоставляет возможности по поиску аргумента как по целочисленному индексу, 
так и по строковому ассоциативному индексу.

Контейнер `BasicArgs` предоставляет предоставляет функции `find` и `find_by_pos`, по которым производится
выбор стратегии работы с контейнером аргументов - детектируется наличие данных методов (также проверяются
некоторые свойства контейнера аргументов).

#// **Ремарка**. Я не настоящий `C++` программист, и я не осилил, как отличить наличие метода `find(std::string)`
#// для поиска по строковому значению от
#// наличия метода `find(std::size_t)`
#// для поиска по индексу.
#// При этом разные компиляторы на мои проверки срабатывали по-разному.
#// Поэтому для определения факта использования своего контейнера я решил завести отдельный новый метод
#// `find_by_pos`.
#// 
#// К слову, код вообще так себе.


#// Метод `at`, как оказалось, есть как у `std::vector`, так и у `std::*map`, и не позволяет отделить 
#// ассоциативные контейнеры от контейнеров произвольного доступа, 
#// поэтому пришлось для своего контейнера
#// завести оригинальное имя метода `find_by_pos`.

Контейнер типа `marty::format::BasicArgs` предоставляет как метод `find` по имени, так и метод 
`find_by_pos(std::size_t)` для "поиска" по индексу.

#!insert{trim,nolineno,noKeepCutTags,filename,no-path,no-filename-line-no} marty_format.h#BasicArgs


### Конструктор marty::format::BasicArgs

Конструктор `BasicArgs` позволяет задать игнорирование регистра именованных аргументов. 
По умолчанию регистр имён именованных аргументов игнорируется.

Игнорирование регистра именованных аргументов производится путём приведения имён
к нижнему регистру, и работает только для имён, содержащих символы из базовой таблицы ASCII.

#!insert{trim,nolineno,noKeepCutTags,filename,no-path,no-filename-line-no} marty_format.h#BasicArgsCtor


### Методы marty::format::BasicArgs::arg

Семейство методов `arg()` задаёт значения аргументов для форматирования
и возвращает ссылку на объект `marty::format::BasicArgs` для того, чтобы можно было делать цепочки вызовов.

Добавляет безымянный аргумент:
#!insert{trim,nolineno,noKeepCutTags,filename,no-path,no-filename-line-no} marty_format.h#BasicArgs_arg_T

Добавляет именованный аргумент, имя задаётся параметром типа `const char*`:
#!insert{trim,nolineno,noKeepCutTags,filename,no-path,no-filename-line-no} marty_format.h#BasicArgs_arg_CharK_T

Добавляет именованный аргумент, имя задаётся параметром типа ключа в `map`, хранящей индексы именованных аргументов:
#!insert{trim,nolineno,noKeepCutTags,filename,no-path,no-filename-line-no} marty_format.h#BasicArgs_arg_KeyK_T

Добавляет безымянный аргумент типа int со значением `0`:
#!insert{trim,nolineno,noKeepCutTags,filename,no-path,no-filename-line-no} marty_format.h#BasicArgs_arg_empty


## marty::format::Args

Данный тип является специализацией типа `BasicArgs` с использованием `marty::format::FormatArgumentVariant`.

#!insert{trim,nolineno,noKeepCutTags,filename,no-path,no-filename-line-no} marty_format.h#Args

#!insert{fail,doc,raise=-1} FormattingFlags.md_


## marty::format::formatMessageImpl

Базовая реализация функций форматирования. 
Пользователь библиотеки может создать свой собственный variant-тип аргумента, добавив
свои собственные типы, и, используя данную функцию, сделать свою кастомизированную функцию форматирования.

#!insert{trim,nolineno,noKeepCutTags,filename,no-path,no-filename-line-no} marty_format.h#BasicImpl

#/*
template< typename StringType      = std::string
        , typename ArgsType        = Args
        , typename WidthCalculator = DefaultUtfWidthCalculator
        >
StringType formatMessageImpl( const StringType &fmt
                            , const ArgsType   &args
                            , FormattingFlags  formattingFlags=FormattingFlags::all
                            )
#*/


## marty::format::formatMessage - аргументы передаются в generic-контейнере

#!insert{trim,nolineno,noKeepCutTags,filename,no-path,no-filename-line-no} marty_format.h#formatMessageGeneric
#!insert{trim,nolineno,noKeepCutTags,filename,no-path,no-filename-line-no} marty_format.h#formatMessageGenericConstCharPtr


## marty::format::formatMessage - аргументы передаются в виде std::initializer_list

#!insert{trim,nolineno,noKeepCutTags,filename,no-path,no-filename-line-no} marty_format.h#formatMessageInitializerList
#!insert{trim,nolineno,noKeepCutTags,filename,no-path,no-filename-line-no} marty_format.h#formatMessageInitializerListConstCharPtr


## Базовая реализация функтора вычисления отображаемой ширины строки 

Базовая реализация функтора вычисления отображаемой ширины строки использует функции библиотеки
`marty::utf` с префиксом `suf` - `simpleUnicodeFeature`. В текущий момент поддерживается
детект пробелов нулевой ширины по кодам символов и детект комбинируемых диакретиков (по диапазонам символов).

#!insert{trim,nolineno,noKeepCutTags,filename,no-path,no-filename-line-no} utils.h#DefaultUtfWidthCalculator

#!insert{trim,nolineno,noKeepCutTags,filename,no-path,no-filename-line-no} marty_format.h#DefaultUtfWidthCalculator












