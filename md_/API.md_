# API библиотеки

## marty::format::FormatArgumentVariant - Variant-тип аргумента

Стандартный тип аргумента на базе `std::variant`

Это стандартный тип `marty::format::FormatArgumentVariant`. Пользователь библиотеки может определить
свой вариант variant'а и использовать его в своих библиотеках или прикладном коде.

#!insert{trim,nolineno,noKeepCutTags,no-filename,no-path,no-filename-line-no} marty_format_types.h#FormatArgumentVariant


## marty::format::BasicArgs

Контейнер `BasicArgs` предоставляет возможности по поиску аргумента как по целочисленному по индексу, 
так и по строковому ассоциативному индексу.

Контейнер `BasicArgs` предоставляет предоставляет функции `find` и `find_by_pos`, по которым производится
выбор стратегии работы с контейнером аргументов - детектируется наличие данных методов (также проверяются
некоторые свойства контейнера аргументов).

**Ремарка**. Я не настоящий `C++` программист, и я не осилил, как отличить наличие метода `find(std::string)`
для поиска по строковому значению от
от наличия метода `find(std::size_t)`
для поиска по индексу.
При этом разные компиляторы на мои проверки срабатывали по-разному.
Поэтому для определения факта использования своего контейнера я решил завести отдельный новый метод
`find_by_pos`.

Метод `at`, как оказалось, есть как у `std::vector`, так и у `std::*map`, и не позволяет отделить 
ассоциативные контейнеры от контейнеров произвольного доступа, поэтому пришлось для своего контейнера
завести оригинальное имя метода `find_by_pos`.

Контейнер типа `marty::format::BasicArgs` предоставляет как метод `find` по имени, так и метод 
`find_by_pos(std::size_t)` для "поиска" по индексу.

#!insert{trim,nolineno,noKeepCutTags,no-filename,no-path,no-filename-line-no} marty_format.h#BasicArgs


### Конструктор marty::format::BasicArgs

Конструктор `BasicArgs` позволяет задать игнорирование регистра именованных аргументов. 
По умолчанию регистр имён именованных аргументов игнорируется.

Игнорирование регистра именованных аргументов производится путём приведения имён
к нижнему регистру, и работает только для имён, содержащих символы из базовой таблицы ASCII.

#!insert{trim,nolineno,noKeepCutTags,no-filename,no-path,no-filename-line-no} marty_format.h#BasicArgsCtor


## marty::format::Args

Данный тип является специализацией типа `BasicArgs` с использованием `marty::format::FormatArgumentVariant`.

#!insert{trim,nolineno,noKeepCutTags,no-filename,no-path,no-filename-line-no} marty_format.h#Args


## marty::format::formatMessageImpl

Базовая реализация функций форматирования. При помощи данной функции пользователь библиотеки
может создавать свои функции форматирования своих собственных данных.

#!insert{trim,nolineno,noKeepCutTags,no-filename,no-path,no-filename-line-no} marty_format.h#BasicImpl



#!insert{trim,nolineno,noKeepCutTags,no-filename,no-path,no-filename-line-no} marty_format.h#formatMessageGeneric
#!insert{trim,nolineno,noKeepCutTags,no-filename,no-path,no-filename-line-no} marty_format.h#formatMessageGenericConstCharPtr
#!insert{trim,nolineno,noKeepCutTags,no-filename,no-path,no-filename-line-no} marty_format.h#formatMessageInitializerList
#!insert{trim,nolineno,noKeepCutTags,no-filename,no-path,no-filename-line-no} marty_format.h#formatMessageInitializerListConstCharPtr

#// !insert{trim,nolineno,noKeepCutTags,no-filename,no-path,no-filename-line-no} marty_format.h#












