/*! \file
    \brief Autogenerated enumerations (Umba Enum Gen)
 */

#pragma once


#include "marty_cpp/marty_enum.h"
#include "marty_cpp/marty_flag_ops.h"
#include "marty_cpp/marty_flags.h"

#include <exception>
#include <map>
#include <set>
#include <stdexcept>
#include <string>
#include <unordered_map>
#include <unordered_set>



namespace marty{
namespace format{

//#!FormatIndexType
enum class FormatIndexType : std::uint32_t
{
    unknown        = (std::uint32_t)(-1) /*!<  */,
    invalid        = (std::uint32_t)(-1) /*!<  */,
    argId          = 0x00 /*!<  */,
    fillRef        = 0x01 /*!<  */,
    widthRef       = 0x02 /*!<  */,
    precisionRef   = 0x03 /*!<  */,
    filterRef      = 0x04 /*!<  */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_IS_FLAGS_FOR_NON_FLAGS_ENUM(FormatIndexType)

MARTY_CPP_ENUM_CLASS_SERIALIZE_BEGIN( FormatIndexType, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( FormatIndexType::unknown        , "Unknown"      );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( FormatIndexType::argId          , "ArgId"        );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( FormatIndexType::fillRef        , "FillRef"      );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( FormatIndexType::filterRef      , "FilterRef"    );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( FormatIndexType::precisionRef   , "PrecisionRef" );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( FormatIndexType::widthRef       , "WidthRef"     );
MARTY_CPP_ENUM_CLASS_SERIALIZE_END( FormatIndexType, std::map, 1 )

MARTY_CPP_ENUM_CLASS_DESERIALIZE_BEGIN( FormatIndexType, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( FormatIndexType::unknown        , "unknown"       );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( FormatIndexType::unknown        , "invalid"       );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( FormatIndexType::argId          , "arg-id"        );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( FormatIndexType::argId          , "arg_id"        );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( FormatIndexType::argId          , "argid"         );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( FormatIndexType::fillRef        , "fill-ref"      );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( FormatIndexType::fillRef        , "fill_ref"      );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( FormatIndexType::fillRef        , "fillref"       );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( FormatIndexType::filterRef      , "filter-ref"    );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( FormatIndexType::filterRef      , "filter_ref"    );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( FormatIndexType::filterRef      , "filterref"     );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( FormatIndexType::precisionRef   , "precision-ref" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( FormatIndexType::precisionRef   , "precision_ref" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( FormatIndexType::precisionRef   , "precisionref"  );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( FormatIndexType::widthRef       , "width-ref"     );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( FormatIndexType::widthRef       , "width_ref"     );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( FormatIndexType::widthRef       , "widthref"      );
MARTY_CPP_ENUM_CLASS_DESERIALIZE_END( FormatIndexType, std::map, 1 )


//#!StdFilterType
enum class StdFilterType : std::uint32_t
{
    unknown    = (std::uint32_t)(-1) /*!<  */,
    invalid    = (std::uint32_t)(-1) /*!<  */,
    none       = 0x00 /*!<  */,
    xml        = 0x01 /*!<  */,
    xmlText    = 0x02 /*!<  */,
    xmlAttr    = 0x03 /*!<  */,
    html       = 0x04 /*!<  */,
    htmlText   = 0x05 /*!<  */,
    htmlAttr   = 0x06 /*!<  */,
    sql        = 0x07 /*!<  */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_IS_FLAGS_FOR_NON_FLAGS_ENUM(StdFilterType)

MARTY_CPP_ENUM_CLASS_SERIALIZE_BEGIN( StdFilterType, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( StdFilterType::unknown    , "Unknown"  );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( StdFilterType::htmlAttr   , "HtmlAttr" );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( StdFilterType::none       , "None"     );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( StdFilterType::xml        , "Xml"      );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( StdFilterType::xmlAttr    , "XmlAttr"  );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( StdFilterType::xmlText    , "XmlText"  );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( StdFilterType::html       , "Html"     );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( StdFilterType::htmlText   , "HtmlText" );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( StdFilterType::sql        , "Sql"      );
MARTY_CPP_ENUM_CLASS_SERIALIZE_END( StdFilterType, std::map, 1 )

MARTY_CPP_ENUM_CLASS_DESERIALIZE_BEGIN( StdFilterType, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StdFilterType::unknown    , "unknown"   );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StdFilterType::unknown    , "invalid"   );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StdFilterType::htmlAttr   , "html-attr" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StdFilterType::htmlAttr   , "html_attr" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StdFilterType::htmlAttr   , "htmlattr"  );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StdFilterType::none       , "none"      );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StdFilterType::xml        , "xml"       );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StdFilterType::xmlAttr    , "xml-attr"  );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StdFilterType::xmlAttr    , "xml_attr"  );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StdFilterType::xmlAttr    , "xmlattr"   );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StdFilterType::xmlText    , "xml-text"  );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StdFilterType::xmlText    , "xml_text"  );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StdFilterType::xmlText    , "xmltext"   );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StdFilterType::html       , "html"      );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StdFilterType::htmlText   , "html-text" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StdFilterType::htmlText   , "html_text" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StdFilterType::htmlText   , "htmltext"  );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( StdFilterType::sql        , "sql"       );
MARTY_CPP_ENUM_CLASS_DESERIALIZE_END( StdFilterType, std::map, 1 )


//#!NumeralSystem
enum class NumeralSystem : std::uint32_t
{
    invalid    = (std::uint32_t)(-1) /*!<  */,
    unknown    = (std::uint32_t)(-1) /*!<  */,
    none       = 0x00 /*!<  */,
    currency   = 0x01 /*!< Base - 10 */,
    bin        = 0x02 /*!< Binary numeral system */,
    oct        = 0x08 /*!< Octal numeral system */,
    dec        = 0x0A /*!< Decimal numeral system */,
    hex        = 0x10 /*!< Hexadecimal numeral system */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_IS_FLAGS_FOR_NON_FLAGS_ENUM(NumeralSystem)

MARTY_CPP_ENUM_CLASS_SERIALIZE_BEGIN( NumeralSystem, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( NumeralSystem::invalid    , "Invalid"  );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( NumeralSystem::dec        , "Dec"      );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( NumeralSystem::none       , "None"     );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( NumeralSystem::bin        , "Bin"      );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( NumeralSystem::currency   , "Currency" );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( NumeralSystem::oct        , "Oct"      );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( NumeralSystem::hex        , "Hex"      );
MARTY_CPP_ENUM_CLASS_SERIALIZE_END( NumeralSystem, std::map, 1 )

MARTY_CPP_ENUM_CLASS_DESERIALIZE_BEGIN( NumeralSystem, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( NumeralSystem::invalid    , "invalid"  );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( NumeralSystem::invalid    , "unknown"  );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( NumeralSystem::dec        , "dec"      );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( NumeralSystem::none       , "none"     );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( NumeralSystem::bin        , "bin"      );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( NumeralSystem::currency   , "currency" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( NumeralSystem::oct        , "oct"      );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( NumeralSystem::hex        , "hex"      );
MARTY_CPP_ENUM_CLASS_DESERIALIZE_END( NumeralSystem, std::map, 1 )


//#!LocaleInfoType
enum class LocaleInfoType : std::uint32_t
{
    invalid     = (std::uint32_t)(-1) /*!<  */,
    unknown     = (std::uint32_t)(-1) /*!<  */,
    invariant   = 0x00 /*!<  */,
    user        = 0x01 /*!<  */,
    system      = 0x02 /*!<  */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_IS_FLAGS_FOR_NON_FLAGS_ENUM(LocaleInfoType)

MARTY_CPP_ENUM_CLASS_SERIALIZE_BEGIN( LocaleInfoType, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( LocaleInfoType::invalid     , "Invalid"   );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( LocaleInfoType::invariant   , "Invariant" );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( LocaleInfoType::user        , "User"      );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( LocaleInfoType::system      , "System"    );
MARTY_CPP_ENUM_CLASS_SERIALIZE_END( LocaleInfoType, std::map, 1 )

MARTY_CPP_ENUM_CLASS_DESERIALIZE_BEGIN( LocaleInfoType, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoType::invalid     , "invalid"   );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoType::invalid     , "unknown"   );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoType::invariant   , "invariant" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoType::user        , "user"      );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoType::system      , "system"    );
MARTY_CPP_ENUM_CLASS_DESERIALIZE_END( LocaleInfoType, std::map, 1 )


//#!LocaleInfoValueType
enum class LocaleInfoValueType : std::uint32_t
{
    invalid                       = (std::uint32_t)(-1) /*!<  */,
    unknown                       = (std::uint32_t)(-1) /*!<  */,
    none                          = 0x00 /*!<  */,
    signDecimal                   = 0x01 /*!< Aka decimal separator, decimal mark, decimal point */,
    signPlus                      = 0x02 /*!<  */,
    signMinus                     = 0x03 /*!<  */,
    signPercent                   = 0x04 /*!<  */,
    signCurrency                  = 0x05 /*!<  */,
    formatPercentNegative         = 0x06 /*!<  */,
    formatPercentPositive         = 0x07 /*!<  */,
    formatPercentShortNegative    = 0x08 /*!<  */,
    formatPercentShortPositive    = 0x09 /*!<  */,
    formatCurrencyNegative        = 0x0A /*!<  */,
    formatCurrencyPositive        = 0x0B /*!<  */,
    formatCurrencyShortNegative   = 0x0C /*!<  */,
    formatCurrencyShortPositive   = 0x0D /*!<  */,
    formatNumberNegative          = 0x0E /*!<  */,
    formatNumberPositive          = 0x0F /*!<  */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_IS_FLAGS_FOR_NON_FLAGS_ENUM(LocaleInfoValueType)

MARTY_CPP_ENUM_CLASS_SERIALIZE_BEGIN( LocaleInfoValueType, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( LocaleInfoValueType::invalid                     , "Invalid"                     );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( LocaleInfoValueType::signDecimal                 , "SignDecimal"                 );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( LocaleInfoValueType::none                        , "None"                        );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( LocaleInfoValueType::signMinus                   , "SignMinus"                   );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( LocaleInfoValueType::formatPercentNegative       , "FormatPercentNegative"       );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( LocaleInfoValueType::formatPercentPositive       , "FormatPercentPositive"       );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( LocaleInfoValueType::signPlus                    , "SignPlus"                    );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( LocaleInfoValueType::signPercent                 , "SignPercent"                 );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( LocaleInfoValueType::signCurrency                , "SignCurrency"                );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( LocaleInfoValueType::formatPercentShortNegative  , "FormatPercentShortNegative"  );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( LocaleInfoValueType::formatPercentShortPositive  , "FormatPercentShortPositive"  );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( LocaleInfoValueType::formatCurrencyPositive      , "FormatCurrencyPositive"      );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( LocaleInfoValueType::formatCurrencyNegative      , "FormatCurrencyNegative"      );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( LocaleInfoValueType::formatCurrencyShortNegative , "FormatCurrencyShortNegative" );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( LocaleInfoValueType::formatCurrencyShortPositive , "FormatCurrencyShortPositive" );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( LocaleInfoValueType::formatNumberNegative        , "FormatNumberNegative"        );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( LocaleInfoValueType::formatNumberPositive        , "FormatNumberPositive"        );
MARTY_CPP_ENUM_CLASS_SERIALIZE_END( LocaleInfoValueType, std::map, 1 )

MARTY_CPP_ENUM_CLASS_DESERIALIZE_BEGIN( LocaleInfoValueType, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::invalid                     , "invalid"                        );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::invalid                     , "unknown"                        );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::signDecimal                 , "sign-decimal"                   );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::signDecimal                 , "sign_decimal"                   );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::signDecimal                 , "signdecimal"                    );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::none                        , "none"                           );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::signMinus                   , "sign-minus"                     );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::signMinus                   , "sign_minus"                     );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::signMinus                   , "signminus"                      );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::formatPercentNegative       , "format-percent-negative"        );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::formatPercentNegative       , "format_percent_negative"        );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::formatPercentNegative       , "formatpercentnegative"          );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::formatPercentPositive       , "format-percent-positive"        );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::formatPercentPositive       , "format_percent_positive"        );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::formatPercentPositive       , "formatpercentpositive"          );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::signPlus                    , "sign-plus"                      );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::signPlus                    , "sign_plus"                      );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::signPlus                    , "signplus"                       );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::signPercent                 , "sign-percent"                   );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::signPercent                 , "sign_percent"                   );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::signPercent                 , "signpercent"                    );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::signCurrency                , "sign-currency"                  );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::signCurrency                , "sign_currency"                  );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::signCurrency                , "signcurrency"                   );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::formatPercentShortNegative  , "format-percent-short-negative"  );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::formatPercentShortNegative  , "format_percent_short_negative"  );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::formatPercentShortNegative  , "formatpercentshortnegative"     );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::formatPercentShortPositive  , "format-percent-short-positive"  );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::formatPercentShortPositive  , "format_percent_short_positive"  );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::formatPercentShortPositive  , "formatpercentshortpositive"     );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::formatCurrencyPositive      , "format-currency-positive"       );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::formatCurrencyPositive      , "format_currency_positive"       );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::formatCurrencyPositive      , "formatcurrencypositive"         );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::formatCurrencyNegative      , "format-currency-negative"       );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::formatCurrencyNegative      , "format_currency_negative"       );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::formatCurrencyNegative      , "formatcurrencynegative"         );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::formatCurrencyShortNegative , "format-currency-short-negative" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::formatCurrencyShortNegative , "format_currency_short_negative" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::formatCurrencyShortNegative , "formatcurrencyshortnegative"    );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::formatCurrencyShortPositive , "format-currency-short-positive" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::formatCurrencyShortPositive , "format_currency_short_positive" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::formatCurrencyShortPositive , "formatcurrencyshortpositive"    );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::formatNumberNegative        , "format-number-negative"         );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::formatNumberNegative        , "formatnumbernegative"           );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::formatNumberNegative        , "format_number_negative"         );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::formatNumberPositive        , "format-number-positive"         );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::formatNumberPositive        , "formatnumberpositive"           );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoValueType::formatNumberPositive        , "format_number_positive"         );
MARTY_CPP_ENUM_CLASS_DESERIALIZE_END( LocaleInfoValueType, std::map, 1 )


//#!LocaleInfoSeparatorType
enum class LocaleInfoSeparatorType : std::uint32_t
{
    invalid      = (std::uint32_t)(-1) /*!<  */,
    unknown      = (std::uint32_t)(-1) /*!<  */,
    thousands    = 0x01 /*!< Separately for each numeral system */,
    fractional   = 0x02 /*!< same as decimal, but for fractional part of floating point numbers */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_IS_FLAGS_FOR_NON_FLAGS_ENUM(LocaleInfoSeparatorType)

MARTY_CPP_ENUM_CLASS_SERIALIZE_BEGIN( LocaleInfoSeparatorType, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( LocaleInfoSeparatorType::thousands    , "Thousands"  );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( LocaleInfoSeparatorType::invalid      , "Invalid"    );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( LocaleInfoSeparatorType::fractional   , "Fractional" );
MARTY_CPP_ENUM_CLASS_SERIALIZE_END( LocaleInfoSeparatorType, std::map, 1 )

MARTY_CPP_ENUM_CLASS_DESERIALIZE_BEGIN( LocaleInfoSeparatorType, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoSeparatorType::thousands    , "thousands"  );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoSeparatorType::invalid      , "invalid"    );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoSeparatorType::invalid      , "unknown"    );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoSeparatorType::fractional   , "fractional" );
MARTY_CPP_ENUM_CLASS_DESERIALIZE_END( LocaleInfoSeparatorType, std::map, 1 )


//#!LocaleInfoDigitsType
enum class LocaleInfoDigitsType : std::uint32_t
{
    invalid    = (std::uint32_t)(-1) /*!<  */,
    unknown    = (std::uint32_t)(-1) /*!<  */,
    number     = 0x01 /*!<  */,
    currency   = 0x02 /*!<  */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_IS_FLAGS_FOR_NON_FLAGS_ENUM(LocaleInfoDigitsType)

MARTY_CPP_ENUM_CLASS_SERIALIZE_BEGIN( LocaleInfoDigitsType, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( LocaleInfoDigitsType::number     , "Number"   );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( LocaleInfoDigitsType::invalid    , "Invalid"  );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( LocaleInfoDigitsType::currency   , "Currency" );
MARTY_CPP_ENUM_CLASS_SERIALIZE_END( LocaleInfoDigitsType, std::map, 1 )

MARTY_CPP_ENUM_CLASS_DESERIALIZE_BEGIN( LocaleInfoDigitsType, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoDigitsType::number     , "number"   );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoDigitsType::invalid    , "invalid"  );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoDigitsType::invalid    , "unknown"  );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( LocaleInfoDigitsType::currency   , "currency" );
MARTY_CPP_ENUM_CLASS_DESERIALIZE_END( LocaleInfoDigitsType, std::map, 1 )


//#!PositiveNumbersMode
enum class PositiveNumbersMode : std::uint32_t
{
    unknown   = (std::uint32_t)(-1) /*!<  */,
    invalid   = (std::uint32_t)(-1) /*!<  */,
    none      = 0x00 /*!< Do not insert anything */,
    space     = 0x01 /*!< Insert space instead of sign */,
    sign      = 0x02 /*!< Insert sign itself */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_IS_FLAGS_FOR_NON_FLAGS_ENUM(PositiveNumbersMode)

MARTY_CPP_ENUM_CLASS_SERIALIZE_BEGIN( PositiveNumbersMode, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( PositiveNumbersMode::unknown   , "Unknown" );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( PositiveNumbersMode::none      , "None"    );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( PositiveNumbersMode::space     , "Space"   );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( PositiveNumbersMode::sign      , "Sign"    );
MARTY_CPP_ENUM_CLASS_SERIALIZE_END( PositiveNumbersMode, std::map, 1 )

MARTY_CPP_ENUM_CLASS_DESERIALIZE_BEGIN( PositiveNumbersMode, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( PositiveNumbersMode::unknown   , "unknown" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( PositiveNumbersMode::unknown   , "invalid" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( PositiveNumbersMode::none      , "none"    );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( PositiveNumbersMode::space     , "space"   );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( PositiveNumbersMode::sign      , "sign"    );
MARTY_CPP_ENUM_CLASS_DESERIALIZE_END( PositiveNumbersMode, std::map, 1 )


//#!FormattingOptionsFlags
enum class FormattingOptionsFlags : std::uint32_t
{
    unknown                   = (std::uint32_t)(-1) /*!<  */,
    invalid                   = (std::uint32_t)(-1) /*!<  */,
    none                      = 0x00 /*!<  */,
    argIdTaken                = 0x01 /*!< fieldWidth value is set */,
    fieldWidthTaken           = 0x02 /*!< fieldWidth value is set */,
    fieldWidthIndirect        = 0x04 /*!< Indirect field width - fieldWidth member contains index of argument with actual fieldWidth value */,
    signPlus                  = 0x08 /*!< Mutually exclusive with signMinus & signSpace */,
    signMinus                 = 0x10 /*!< Mutually exclusive with signPlus & signSpace */,
    signSpace                 = 0x20 /*!< Mutually exclusive with signMinus & signPlus */,
    signZ                     = 0x40 /*!<  */,
    signAlterForm             = 0x80 /*!<  */,
    signZero                  = 0x100 /*!<  */,
    fillingTaken              = 0x200 /*!<  */,
    fillingIndirect           = 0x400 /*!<  */,
    localeFormatting          = 0x800 /*!<  */,
    precisionTaken            = 0x1000 /*!<  */,
    precisionIndirect         = 0x2000 /*!<  */,
    caseInvert                = 0x4000 /*!<  */,
    bitCast                   = 0x8000 /*!<  */,
    internalSigned            = 0x10000 /*!<  */,
    internalNegative          = 0x20000 /*!<  */,
    fieldWidthIndirectTaken   = fieldWidthTaken | fieldWidthIndirect /*!<  */,
    precisionIndirectTaken    = precisionTaken | precisionIndirect /*!<  */,
    fillingIndirectTaken      = fillingTaken | fillingIndirect /*!<  */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_FLAGS(FormattingOptionsFlags)

MARTY_CPP_ENUM_FLAGS_SERIALIZE_BEGIN( FormattingOptionsFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingOptionsFlags::unknown                  , "Unknown"                 );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingOptionsFlags::none                     , "None"                    );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingOptionsFlags::fieldWidthIndirect       , "FieldWidthIndirect"      );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingOptionsFlags::argIdTaken               , "ArgIdTaken"              );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingOptionsFlags::signMinus                , "SignMinus"               );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingOptionsFlags::signPlus                 , "SignPlus"                );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingOptionsFlags::fieldWidthTaken          , "FieldWidthTaken"         );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingOptionsFlags::signAlterForm            , "SignAlterForm"           );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingOptionsFlags::signSpace                , "SignSpace"               );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingOptionsFlags::signZ                    , "SignZ"                   );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingOptionsFlags::signZero                 , "SignZero"                );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingOptionsFlags::fillingTaken             , "FillingTaken"            );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingOptionsFlags::fillingIndirect          , "FillingIndirect"         );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingOptionsFlags::localeFormatting         , "LocaleFormatting"        );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingOptionsFlags::precisionTaken           , "PrecisionTaken"          );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingOptionsFlags::precisionIndirect        , "PrecisionIndirect"       );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingOptionsFlags::caseInvert               , "CaseInvert"              );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingOptionsFlags::bitCast                  , "BitCast"                 );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingOptionsFlags::internalSigned           , "InternalSigned"          );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingOptionsFlags::internalNegative         , "InternalNegative"        );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingOptionsFlags::fieldWidthIndirectTaken  , "FieldWidthIndirectTaken" );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingOptionsFlags::precisionIndirectTaken   , "PrecisionIndirectTaken"  );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingOptionsFlags::fillingIndirectTaken     , "FillingIndirectTaken"    );
MARTY_CPP_ENUM_FLAGS_SERIALIZE_END( FormattingOptionsFlags, std::map, 1 )

MARTY_CPP_ENUM_FLAGS_DESERIALIZE_BEGIN( FormattingOptionsFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::unknown                  , "unknown"                    );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::unknown                  , "invalid"                    );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::none                     , "none"                       );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::fieldWidthIndirect       , "field-width-indirect"       );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::fieldWidthIndirect       , "field_width_indirect"       );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::fieldWidthIndirect       , "fieldwidthindirect"         );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::argIdTaken               , "arg-id-taken"               );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::argIdTaken               , "argidtaken"                 );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::argIdTaken               , "arg_id_taken"               );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::signMinus                , "sign-minus"                 );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::signMinus                , "sign_minus"                 );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::signMinus                , "signminus"                  );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::signPlus                 , "sign-plus"                  );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::signPlus                 , "sign_plus"                  );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::signPlus                 , "signplus"                   );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::fieldWidthTaken          , "field-width-taken"          );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::fieldWidthTaken          , "field_width_taken"          );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::fieldWidthTaken          , "fieldwidthtaken"            );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::signAlterForm            , "sign-alter-form"            );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::signAlterForm            , "signalterform"              );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::signAlterForm            , "sign_alter_form"            );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::signSpace                , "sign-space"                 );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::signSpace                , "sign_space"                 );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::signSpace                , "signspace"                  );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::signZ                    , "sign-z"                     );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::signZ                    , "sign_z"                     );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::signZ                    , "signz"                      );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::signZero                 , "sign-zero"                  );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::signZero                 , "sign_zero"                  );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::signZero                 , "signzero"                   );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::fillingTaken             , "filling-taken"              );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::fillingTaken             , "filling_taken"              );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::fillingTaken             , "fillingtaken"               );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::fillingIndirect          , "filling-indirect"           );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::fillingIndirect          , "filling_indirect"           );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::fillingIndirect          , "fillingindirect"            );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::localeFormatting         , "locale-formatting"          );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::localeFormatting         , "locale_formatting"          );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::localeFormatting         , "localeformatting"           );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::precisionTaken           , "precision-taken"            );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::precisionTaken           , "precision_taken"            );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::precisionTaken           , "precisiontaken"             );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::precisionIndirect        , "precision-indirect"         );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::precisionIndirect        , "precision_indirect"         );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::precisionIndirect        , "precisionindirect"          );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::caseInvert               , "case-invert"                );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::caseInvert               , "case_invert"                );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::caseInvert               , "caseinvert"                 );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::bitCast                  , "bit-cast"                   );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::bitCast                  , "bit_cast"                   );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::bitCast                  , "bitcast"                    );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::internalSigned           , "internal-signed"            );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::internalSigned           , "internal_signed"            );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::internalSigned           , "internalsigned"             );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::internalNegative         , "internal-negative"          );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::internalNegative         , "internal_negative"          );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::internalNegative         , "internalnegative"           );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::fieldWidthIndirectTaken  , "field-width-indirect-taken" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::fieldWidthIndirectTaken  , "field_width_indirect_taken" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::fieldWidthIndirectTaken  , "fieldwidthindirecttaken"    );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::precisionIndirectTaken   , "precision-indirect-taken"   );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::precisionIndirectTaken   , "precision_indirect_taken"   );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::precisionIndirectTaken   , "precisionindirecttaken"     );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::fillingIndirectTaken     , "filling-indirect-taken"     );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::fillingIndirectTaken     , "filling_indirect_taken"     );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingOptionsFlags::fillingIndirectTaken     , "fillingindirecttaken"       );
MARTY_CPP_ENUM_FLAGS_DESERIALIZE_END( FormattingOptionsFlags, std::map, 1 )

MARTY_CPP_ENUM_FLAGS_SERIALIZE_SET(FormattingOptionsFlags, std::set)

MARTY_CPP_ENUM_FLAGS_DESERIALIZE_SET(FormattingOptionsFlags, std::set)


//#!FormattingFlags
enum class FormattingFlags : std::uint32_t
{
    unknown                         = (std::uint32_t)(-1) /*!<  */,
    invalid                         = (std::uint32_t)(-1) /*!<  */,
    none                            = 0x00 /*!<  */,
    ignoreFormatStringErrors        = 0x01 /*!< Ignore errors in format string */,
    ignoreArgumentErrors            = 0x02 /*!< Ignore errors while searching for arguments */,
    ignoreFormattingErrors          = 0x04 /*!< Ignore errors while formatting values */,
    ignoreFillIndirectErrors        = 0x08 /*!< Ignore errors while searching for arguments for fill char */,
    ignoreWidthIndirectErrors       = 0x10 /*!< Ignore errors while searching for arguments for width */,
    ignorePrecisionIndirectErrors   = 0x20 /*!< Ignore errors while searching for arguments for precision */,
    ignoreConversionErrors          = 0x40 /*!< Ignore formatting type specifications and allow automatic type conversion */,
    ignoreTypeMismatchErrors        = 0x80 /*!< Ignore formatting type specification char mismatch errors */,
    ignoreNotFilterErrors           = 0x100 /*!< Ignore errors - non-filter value used as filter */,
    considerZeroWidthSpaces         = 0x200 /*!< Учитывать пробелы нулевой ширины */,
    considerCombiningChars          = 0x400 /*!< Учитывать комбинированные символы */,
    fractionalGroupping             = 0x800 /*!< Группировка цифр также и в дробной части числа, если разделитель разрядов задан для целой части числа */,
    ignoreOptionsIndirectErrors     = ignoreFillIndirectErrors | ignoreWidthIndirectErrors | ignorePrecisionIndirectErrors /*!<  */,
    ignoreErrors                    = ignoreFormatStringErrors | ignoreArgumentErrors | ignoreFormattingErrors | ignoreOptionsIndirectErrors | ignoreConversionErrors | ignoreNotFilterErrors | ignoreTypeMismatchErrors /*!<  */,
    considerUnicodeFeatures         = considerZeroWidthSpaces  | considerCombiningChars /*!<  */,
    allBase                         = ignoreErrors | considerUnicodeFeatures /*!<  */,
    all                             = allBase | fractionalGroupping /*!<  */,
    localeForceCustom               = 0x1000 /*!<  */,
    localeUseSystem                 = 0x2000 /*!< Instead of user */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_FLAGS(FormattingFlags)

MARTY_CPP_ENUM_FLAGS_SERIALIZE_BEGIN( FormattingFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingFlags::unknown                         , "Unknown"                       );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingFlags::ignoreFillIndirectErrors        , "IgnoreFillIndirectErrors"      );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingFlags::none                            , "None"                          );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingFlags::ignoreFormatStringErrors        , "IgnoreFormatStringErrors"      );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingFlags::ignoreArgumentErrors            , "IgnoreArgumentErrors"          );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingFlags::ignoreFormattingErrors          , "IgnoreFormattingErrors"        );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingFlags::ignorePrecisionIndirectErrors   , "IgnorePrecisionIndirectErrors" );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingFlags::ignoreWidthIndirectErrors       , "IgnoreWidthIndirectErrors"     );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingFlags::ignoreConversionErrors          , "IgnoreConversionErrors"        );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingFlags::ignoreTypeMismatchErrors        , "IgnoreTypeMismatchErrors"      );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingFlags::localeForceCustom               , "LocaleForceCustom"             );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingFlags::ignoreNotFilterErrors           , "IgnoreNotFilterErrors"         );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingFlags::localeUseSystem                 , "LocaleUseSystem"               );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingFlags::considerZeroWidthSpaces         , "ConsiderZeroWidthSpaces"       );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingFlags::considerCombiningChars          , "ConsiderCombiningChars"        );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingFlags::fractionalGroupping             , "FractionalGroupping"           );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingFlags::ignoreOptionsIndirectErrors     , "IgnoreOptionsIndirectErrors"   );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingFlags::ignoreErrors                    , "IgnoreErrors"                  );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingFlags::considerUnicodeFeatures         , "ConsiderUnicodeFeatures"       );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingFlags::allBase                         , "AllBase"                       );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( FormattingFlags::all                             , "All"                           );
MARTY_CPP_ENUM_FLAGS_SERIALIZE_END( FormattingFlags, std::map, 1 )

MARTY_CPP_ENUM_FLAGS_DESERIALIZE_BEGIN( FormattingFlags, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::unknown                         , "unknown"                          );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::unknown                         , "invalid"                          );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::ignoreFillIndirectErrors        , "ignore-fill-indirect-errors"      );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::ignoreFillIndirectErrors        , "ignore_fill_indirect_errors"      );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::ignoreFillIndirectErrors        , "ignorefillindirecterrors"         );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::none                            , "none"                             );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::ignoreFormatStringErrors        , "ignore-format-string-errors"      );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::ignoreFormatStringErrors        , "ignore_format_string_errors"      );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::ignoreFormatStringErrors        , "ignoreformatstringerrors"         );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::ignoreArgumentErrors            , "ignore-argument-errors"           );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::ignoreArgumentErrors            , "ignoreargumenterrors"             );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::ignoreArgumentErrors            , "ignore_argument_errors"           );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::ignoreFormattingErrors          , "ignore-formatting-errors"         );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::ignoreFormattingErrors          , "ignore_formatting_errors"         );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::ignoreFormattingErrors          , "ignoreformattingerrors"           );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::ignorePrecisionIndirectErrors   , "ignore-precision-indirect-errors" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::ignorePrecisionIndirectErrors   , "ignore_precision_indirect_errors" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::ignorePrecisionIndirectErrors   , "ignoreprecisionindirecterrors"    );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::ignoreWidthIndirectErrors       , "ignore-width-indirect-errors"     );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::ignoreWidthIndirectErrors       , "ignore_width_indirect_errors"     );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::ignoreWidthIndirectErrors       , "ignorewidthindirecterrors"        );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::ignoreConversionErrors          , "ignore-conversion-errors"         );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::ignoreConversionErrors          , "ignore_conversion_errors"         );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::ignoreConversionErrors          , "ignoreconversionerrors"           );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::ignoreTypeMismatchErrors        , "ignore-type-mismatch-errors"      );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::ignoreTypeMismatchErrors        , "ignore_type_mismatch_errors"      );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::ignoreTypeMismatchErrors        , "ignoretypemismatcherrors"         );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::localeForceCustom               , "locale-force-custom"              );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::localeForceCustom               , "locale_force_custom"              );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::localeForceCustom               , "localeforcecustom"                );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::ignoreNotFilterErrors           , "ignore-not-filter-errors"         );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::ignoreNotFilterErrors           , "ignore_not_filter_errors"         );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::ignoreNotFilterErrors           , "ignorenotfiltererrors"            );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::localeUseSystem                 , "locale-use-system"                );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::localeUseSystem                 , "locale_use_system"                );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::localeUseSystem                 , "localeusesystem"                  );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::considerZeroWidthSpaces         , "consider-zero-width-spaces"       );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::considerZeroWidthSpaces         , "consider_zero_width_spaces"       );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::considerZeroWidthSpaces         , "considerzerowidthspaces"          );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::considerCombiningChars          , "consider-combining-chars"         );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::considerCombiningChars          , "considercombiningchars"           );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::considerCombiningChars          , "consider_combining_chars"         );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::fractionalGroupping             , "fractional-groupping"             );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::fractionalGroupping             , "fractional_groupping"             );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::fractionalGroupping             , "fractionalgroupping"              );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::ignoreOptionsIndirectErrors     , "ignore-options-indirect-errors"   );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::ignoreOptionsIndirectErrors     , "ignore_options_indirect_errors"   );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::ignoreOptionsIndirectErrors     , "ignoreoptionsindirecterrors"      );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::ignoreErrors                    , "ignore-errors"                    );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::ignoreErrors                    , "ignore_errors"                    );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::ignoreErrors                    , "ignoreerrors"                     );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::considerUnicodeFeatures         , "consider-unicode-features"        );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::considerUnicodeFeatures         , "consider_unicode_features"        );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::considerUnicodeFeatures         , "considerunicodefeatures"          );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::allBase                         , "all-base"                         );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::allBase                         , "all_base"                         );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::allBase                         , "allbase"                          );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( FormattingFlags::all                             , "all"                              );
MARTY_CPP_ENUM_FLAGS_DESERIALIZE_END( FormattingFlags, std::map, 1 )

MARTY_CPP_ENUM_FLAGS_SERIALIZE_SET(FormattingFlags, std::set)

MARTY_CPP_ENUM_FLAGS_DESERIALIZE_SET(FormattingFlags, std::set)

} // namespace format
} // namespace marty

